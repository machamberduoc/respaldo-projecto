# Generated by Django 5.1.2 on 2024-10-31 23:32

from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='DataAnalytic',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('serverd', models.CharField(max_length=100)),
                ('standartd', models.DateTimeField(auto_now_add=True)),
                ('disknamed', models.CharField(max_length=100)),
                ('totalsized', models.DecimalField(decimal_places=2, max_digits=12)),
                ('usedgigasbytsd', models.DecimalField(decimal_places=2, max_digits=12)),
                ('freegigabytesd', models.DecimalField(decimal_places=2, max_digits=5)),
                ('usedbytesd', models.DecimalField(decimal_places=2, max_digits=12)),
                ('freebytesd', models.DecimalField(decimal_places=2, max_digits=12)),
                ('tempdiskd', models.DecimalField(decimal_places=2, max_digits=5)),
                ('readwritenspeadd', models.DecimalField(decimal_places=2, max_digits=5)),
            ],
        ),
        migrations.CreateModel(
            name='KpiAnalytic',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('serverx', models.CharField(max_length=100)),
                ('standardx', models.DateField(auto_now_add=True)),
                ('disknamex', models.CharField(max_length=100)),
                ('costownership', models.DecimalField(decimal_places=2, max_digits=1000)),
                ('returninvestment', models.DecimalField(decimal_places=2, max_digits=1000)),
                ('durabilityfilespan', models.DecimalField(decimal_places=2, max_digits=1000)),
                ('maintcost', models.DecimalField(decimal_places=2, max_digits=1000)),
            ],
        ),
        migrations.CreateModel(
            name='Monitor',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('serverm', models.CharField(max_length=100)),
                ('standartm', models.DateTimeField(auto_now_add=True)),
                ('disknamem', models.CharField(max_length=100)),
                ('totalsizem', models.DecimalField(decimal_places=2, max_digits=12)),
                ('usedgigasbytsm', models.DecimalField(decimal_places=2, max_digits=12)),
                ('freegigabytes', models.DecimalField(decimal_places=2, max_digits=12)),
                ('tempdiskm', models.DecimalField(decimal_places=2, max_digits=5)),
            ],
        ),
        migrations.CreateModel(
            name='Recomendations',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('recomends', models.CharField(max_length=100)),
                ('creaciondate', models.DateTimeField(auto_now_add=True)),
                ('Estado', models.CharField(max_length=100)),
            ],
        ),
        migrations.CreateModel(
            name='RegistroAuditoria',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('nameaudit', models.CharField(max_length=200, unique=True)),
                ('ruteaudit', models.CharField(blank=True, max_length=15, null=True)),
                ('phoneaudit', models.CharField(blank=True, max_length=200, null=True)),
                ('emailaudit', models.EmailField(blank=True, max_length=200, null=True)),
                ('companipositionaudit', models.CharField(blank=True, max_length=200, null=True)),
                ('dateaudit', models.DateField(blank=True, null=True)),
                ('typeaudit', models.CharField(blank=True, max_length=200, null=True)),
                ('typedocument', models.BinaryField(blank=True, null=True)),
                ('textaudit', models.TextField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Servers',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('server', models.CharField(max_length=100)),
                ('standart', models.DateTimeField(auto_now_add=True)),
                ('diskname', models.CharField(max_length=100)),
                ('totalsize', models.DecimalField(decimal_places=2, max_digits=12)),
                ('freegigabytes', models.DecimalField(decimal_places=2, max_digits=12)),
                ('usedbytes', models.DecimalField(decimal_places=2, max_digits=5)),
                ('freebytes', models.DecimalField(decimal_places=2, max_digits=5)),
                ('temdisk', models.DecimalField(decimal_places=2, max_digits=5)),
                ('readwritenspead', models.DecimalField(decimal_places=2, max_digits=5)),
            ],
        ),
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('username', models.CharField(max_length=100, unique=True)),
                ('correo', models.EmailField(max_length=254, unique=True)),
                ('fecha_registro', models.DateTimeField(auto_now_add=True)),
                ('is_active', models.BooleanField(default=True)),
                ('is_staff', models.BooleanField(default=False)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'abstract': False,
            },
        ),
    ]
